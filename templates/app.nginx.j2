upstream {{app_name}} {
    server localhost:{{app_port}};
}

##  Prevent processing requests with undefined server names
server {
    listen      80;
    return      444;
}

## Bump 80 to 443
## https://serverfault.com/questions/67316/in-nginx-how-can-i-rewrite-all-http-requests-to-https-while-maintaining-sub-dom
# {% if domains | length != 0 %}
# server {
#     listen         80;
#     server_name {% for domain in domains %} {{ domain }}{% endfor %};
#     return         301 https://$server_name$request_uri;
# }
# {% endif %}

# The following map statement is required
# if you plan to support channels. See http://nginx.com/blog/websocket-nginx/
map $http_upgrade $connection_upgrade {
    default upgrade;
    '' close;
}

server{
    ## Protect Against POODLE
    # ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    # listen 443 ssl;
    listen 80;

    {% if domains | length != 0 %}
    server_name {% for domain in domains %} {{ domain }}{% endfor %};
    {% endif %}

    location / {
        try_files $uri @proxy;
    }

    location @proxy {
        proxy_redirect off;
        proxy_pass http://charlie;
        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

        # Related to nginx's ability to cache responses
        proxy_http_version 1.1;

        # The following two headers need to be set in order
        # to keep the websocket connection open. Otherwise you'll see
        # HTTP 400's being returned from websocket connections.
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;
    }

    ## Gzip Settings
    # gzip on;
    # gzip_disable "msie6";
}
